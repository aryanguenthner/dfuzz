=Messages=

==PUSH==

PUSH PROGRAM
 * Message from the server to tell a client to install a program

PUSH CONFIG
 * Message from the server to setup or configure a program on the client

PUSH DATA
 * Message from the server that initiates a data transfer

PUSH UPDATE
 * Message from the server that allows the client to update a program or the operating system

PUSH DELETE
 * Message from the server that will tell the client to delete a local resource

PUSH KILL
 * Message from the server that will kill a process or set of processes

PUSH START
 * Message from the server to the client to start a fuzzing or analysis sequence

PUSH CMD
 * Message from the server to the client to execute a command

PUSH RESPONSE
 * Message from the client to the server acknowledging the request and responding with a status code (eg., Success, Error, Acknowledge-Continue)

==QUERY==

QUERY STATUS
 * Message from the server asking for the status of running fuzzing operations

QUERY RESOURCES
 * Message from the server asking for a resource count (memory, cpu usage, etc) on the client

QUERY SETUP
 * Message from the server asking what applications, configurations and data are installed on the client

QUERY PROGRESS
 * Message from the server to the client asking about information on a particular job

QUERY RESPONSE
 * Message from the client to the server responding with a status code (eg., Sucess, Error, Acknowledge-Continue)

==REPORT==

REPORT CRASH
 * Message from the client telling the server that an application being fuzzed crashed. The message will also detail information about the crash

REPORT PROGRESS
 * Message from the client telling the server the progress of fuzzing

REPORT READY
 * Message from the client telling the server that it is up and ready to fuzz. This will be the first message sent to the server. 

REPORT ERROR
 * Message from the client reporting an error condition

REPORT RESPONSE
 * Message from the server to the client responding with a status (Acknowledge, Acknowledge-Continue)

=Synchronization=
Protocol will be asynchronous. <br> 
Messages will be transferred over TCP connection. <br>
Messages shall be transferred over TCP port 12456. Data shall be transferred over port 22. <br> 
Messages should be transferred over an encrypted tunnel from and to a client and a server. Encrypted traffic shall adhere to the IPMEIR Specification <br> 
Encrypted traffic can be transferred in transport or tunnel mode. <br>
Messages will typically exhibit a REQUEST RESPONSE behaviour. <br>
The DFUZZ header shall be present in all control plain traffic (ie., messages over port 12456) <br>
The Dfuzz control plain traffic (ie., traffic over tcp port 12456) will be a binary protocol. The protocol will be a length specified protocol.  
Client to client interaction is a potential feature that will be explored in later releases of dfuzz. <br>
Server to server interaction is a potential feature that will be explored in later releases of dfuzz. <br>



=DFUZZ Header Format=
|| *Field || *Length || *Value ||
|| DFUZZ Header Identification Number || 4 bytes || AAAA (hex) ||
|| Message Type || 4 bytes || Integer  ||
|| Next Header || 4 bytes || Integer || 
|| Length || 8 bytes || Length of header+data ||
|| Identification || 16 bytes || Integer ||
|| Padding || 4 bytes || Zeros || 
|| Data || Variable || Additional headers and their appropriate data ||

=PUSH START Header Format=
|| *Field || *Length || *Value ||
|| Next Header || 4 bytes || Integer || 
|| Length || 8 bytes || Integer || 
|| Job ID || 8 bytes || Integer || 
|| Program Name || 8 bytes || Ascii || 
|| Users || 4 bytes ||  Number of users (Integer)||
|| Username || 4 bytes || This field will be repeated for each additional user (Ascii) || 

=REPORT CRASH Header Format=
|| *Field || *Length || *Value ||
|| Next Header || 4 bytes || Integer ||
|| Length || 8 bytes || Integer ||
|| Job ID || 8 bytes || Integer ||
|| Unique Crash Identifier Type || 2 bytes || Number representing the unique crash identification method. This field will be repeated for each crash identifier type and its subsequent crash hash. Crash Identification type implies encoding and hashing algorithm (Integer) ||
|| Unique Crash Hash || 32 bytes || Unique hash (Hex) ||
